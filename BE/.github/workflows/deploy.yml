name: Deploy Spring Application to AWS EC2

# 이 GitHub Actions 워크플로우는 메인 브랜치에 코드가 푸시될 때마다 실행됩니다.
on:
  push:
    branches:
      - deploy

# 'build-and-deploy' 작업을 정의합니다. 이 작업은 ubuntu-latest 환경에서 실행됩니다.
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # 작업을 순차적으로 정의합니다.
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # 현재 리포지토리 코드를 체크아웃합니다.

      - name: Grant execute permission for gradlew
        run: | 
          chmod +x gradlew
          echo "${{ secrets.ENV_PROPERTIES }}" > ./src/main/resources/env.properties
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
        # Gradle 래퍼 스크립트에 실행 권한을 부여합니다.

      - name: Make directory for deliver
        run: mkdir deploy
        # 배포를 위한 디렉토리를 생성합니다.
#      - name: Write the env.properties
#        run: |
#          echo "${{ secrets.ENV_PROPERTIES }}" > ./src/main/resources/env.properties
#          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      ## Docker 이미지를 빌드하고 Docker Hub에 푸시합니다.
      - name: web springboot docker build and push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/foodietree_be:latest .
          docker push dazzlingtea/foodietree_be:latest
          # Docker Hub에 로그인 후, 최신 태그를 사용하여 이미지를 빌드하고 푸시합니다.
          # '--no-cache' 옵션은 캐시를 사용하지 않고 이미지를 빌드합니다.

      # Docker Hub에서 이미지를 pull하고 EC2 인스턴스에 배포합니다.
      - name: Deploy to Dev
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Docker login..."
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
            
            echo "Write the docker-compose.yml"
            echo "${{ secrets.DOCKER_COMPOSE_YML }}" > ~/project/docker-compose.yml
            # EC2 인스턴스에 docker-compose.yml 파일을 작성합니다.
            
            cd ~/project
            echo "Stopping existing container..."
            docker-compose down || true
            # 기존에 실행 중인 도커 컨테이너를 중지합니다.

            echo "Remove Existing Docker image..."
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/foodietree_be:latest || true
            # 이전에 다운로드된 도커 이미지를 삭제합니다.
            
            docker system prune -af
            # -a: 모든 dangling 이미지와 컨테이너를 포함하여 더 많은 리소스를 정리합니다.
            # -f: 사용자 확인 없이 강제로 실행합니다.

            echo "Pulling Docker image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/foodietree_be:latest
            # 최신 도커 이미지를 다시 pull합니다.

            echo "Starting new container..."
            docker-compose up -d 
            # docker-compose를 사용하여 새 컨테이너를 백그라운드 모드에서 실행합니다.